{"version":3,"sources":["Components/WelcomePage.js","Components/Register.js","Components/Signin.js","Components/Profile.js","Components/Main.js","Components/SearchButton.js","Components/CreateList.js","Components/ListItem.js","Components/TaskItem.js","App.js","serviceWorker.js","index.js"],"names":["WelcomePage","className","to","Register","Signin","Profile","Main","props","Fragment","user","firstName","src","photo","alt","SearchButton","CreateList","ListItem","TaskItem","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAiBeA,EAdK,WAChB,OACI,6BACI,8CACA,uDAEA,kBAAC,IAAD,CAASC,UAAU,gBAAgBC,GAAG,aAAtC,WAAmE,6BACnE,kBAAC,IAAD,CAASD,UAAU,gBAAgBC,GAAG,WAAtC,WAAiE,6BACjE,6BACA,kBAAC,IAAD,CAASD,UAAU,cAAcC,GAAG,OAApC,mBCFGC,EARE,WACb,OACI,6BACI,0CCKGC,EARA,WACX,OACI,6BACI,yCCKGC,EARC,WACZ,OACI,6BACI,yCCiCGC,EA9BF,SAACC,GACV,OACI,kBAAC,IAAMC,SAAP,KACE,gCACI,yBAAKP,UAAU,YACb,oCAAUM,EAAME,MAAN,aAAoBF,EAAME,KAAKC,WAAzC,MAEDH,EAAME,MAAQ,6BACb,kBAAC,IAAD,CAASP,GAAG,YAAW,yBAAKS,IAAKJ,EAAME,KAAKG,MAAOC,IAAI,YAG7D,kCACIN,EAAME,MACN,yBAAKR,UAAU,UACb,sDACA,kFAIN,gCACE,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,wDCrBCa,EARM,WACjB,OACI,6BACI,8CCKGC,EARI,WACf,OACI,6BACI,4CCKGC,G,MARE,WACb,OACI,6BACI,2CCKGC,G,MARE,WACb,OACI,6BACI,2C,kBC4BGC,MAdf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWlB,IACnC,kBAAC,IAAD,CAAOiB,KAAK,UAAUC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,WAAWC,UAAWhB,IAClC,kBAAC,IAAD,CAAOe,KAAK,MAAMC,UAAWf,IAC7B,kBAAC,IAAD,CAAOc,KAAK,mBAAmBC,UAAWL,IAC1C,kBAAC,IAAD,CAAOI,KAAK,gCAAgCC,UAAWJ,MChBzCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SDyH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e876075.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst WelcomePage = () => {\r\n    return(\r\n        <div>\r\n            <h1>Wunderlist 2.0</h1>\r\n            <h2>Organize. Remind. Share</h2>\r\n\r\n            <NavLink className=\"button-SignUp\" to=\"/register\">Sign up</NavLink><br/>\r\n            <NavLink className=\"button-SignIn\" to=\"/signin\">Sign in</NavLink><br/>\r\n            <br/>\r\n            <NavLink className=\"button-Main\" to=\"/my\">(DEV: Bypass)</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WelcomePage;","import React from \"react\";\r\n\r\nconst Register = () => {\r\n    return(\r\n        <div>\r\n            <h1>Register</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import React from \"react\";\r\n\r\nconst Signin = () => {\r\n    return(\r\n        <div>\r\n            <h1>Sign In</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signin;","import React from \"react\";\r\n\r\nconst Profile = () => {\r\n    return(\r\n        <div>\r\n            <h1>Profile</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  // ScheduledItems\r\n  SearchButton\r\n  ,CreateList\r\n} from \"./\";\r\n\r\nconst Main = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n          <header>\r\n              <div className=\"Greeting\">\r\n                <h1>Hello{props.user && ` , ${props.user.firstName}`}!</h1>\r\n              </div>\r\n              {props.user && <div>\r\n                <NavLink to=\"/profile\"><img src={props.user.photo} alt=\"User\"/></NavLink>\r\n              </div>}\r\n          </header>\r\n          <section>\r\n            {!props.user &&\r\n              <div className=\"NoData\">\r\n                <h2>Welcome to Wunderlist!</h2>\r\n                <h3>Click the + button below to add your first list.</h3>\r\n              </div>\r\n            }\r\n          </section>\r\n          <footer>\r\n            <div className=\"footerItems\">\r\n              <SearchButton/>\r\n              <CreateList/>\r\n              <div>&copy;2019 Wunderlist</div>\r\n            </div>\r\n          </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\n\r\nconst SearchButton = () => {\r\n    return(\r\n        <div>\r\n            <h4>SearchButton</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchButton;","import React from \"react\";\r\n\r\nconst CreateList = () => {\r\n    return(\r\n        <div>\r\n            <h4>CreateList</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateList;","import React from \"react\";\r\n\r\nconst ListItem = () => {\r\n    return(\r\n        <div>\r\n            <h1>ListItem</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from \"react\";\r\n\r\nconst TaskItem = () => {\r\n    return(\r\n        <div>\r\n            <h1>TaskItem</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\nimport './App.css';\nimport { Route } from \"react-router-dom\";\nimport {\n  WelcomePage\n  , Register\n  , Signin\n  , Profile\n  , Main\n  // , Item\n  // , List\n  , ListItem\n  // , Task\n  , TaskItem\n  // , Dialog\n  // , Reminder\n  // , Search\n} from './Components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={WelcomePage}/>\n      <Route path=\"/register\" component={Register}/>\n      <Route path=\"/signin\" component={Signin}/>\n      <Route path=\"/profile\" component={Profile}/>\n      <Route path=\"/my\" component={Main}/>\n      <Route path=\"/my/list/:listid\" component={ListItem}/>\n      <Route path=\"/my/list/:listid/task/:taskid\" component={TaskItem}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './css/index.css'; //Generated by LESS.\n\n/* jshint ignore:start */\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n/* jshint ignore:end */"],"sourceRoot":""}